Ejecutable como documento HTML5
    con autor allnulled
    con nombre index
    con versi√≥n 1
<head>
    <title>üåê ColorScript üåê</title>
    <meta charset="utf8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" type="text/css" href="lib/win7/win7.scoped.2.css" />
    <link rel="stylesheet" type="text/css" href="lib/codemirror/codemirror.css" />
    <link rel="stylesheet" type="text/css" href="lib/theme/theme.css" />
    <script src="lib/codemirror/codemirror.js"></script>
    <script src="lib/color-script/color-script.js"></script>
    <script src="lib/calo/calo.js"></script>
    <script src="lib/calo/calo.js"></script>
</head>
<body><div id="app"></div></body>.

### importo api nativa.

asigno window.PaginaDeInicio como un componente vue2 con nombre "PaginaDeInicio" con plantilla {
  <div class="PaginaDeInicio Component">
    <h5>üåê ColorScript üåê</h5>
    <div>
      <div>
        <textarea ref="consola_de_entrada"></textarea>
      </div>
      <div>
        <button style="width:100%;" v-on:click="compilar_colores">Compile</button>
      </div>
      <div class="caja_de_error" v-if="error" v-on:click="limpiar_error">
        <div>{{ error.name }}: {{ error.message }}</div>
        <div v-if="error.location">
          <div>Position: {{ error.location }}</div>
        </div>
        <div v-if="error.expected">
          <div>Expected: {{ error.expected }}</div>
        </div>
      </div>
      <div>
        <table>
          <tr class="caja_de_color" v-for="color, color_index in colores" v-bind:key="'color-' + color_index">
            <td class="indice_de_color">{{ color_index }}</td>
            <td class="cuadrado_de_color" :style="'background-color:' + color.toRGB()"></td>
            <td class="numero_de_color">{{ color.toHexadecimal() }}</td>
            <td class="numero_de_color">{{ color.toRGB() }}</td>
          </tr>
        </table>
      </div>
    </div>
  </div>
} con l√≥gica {
  retorno {
    propiedad props como {
      propiedad root como {
        propiedad type como Object.
        propiedad required como true.
      }.
    }.
    m√©todo data donde {
      retorno {
        colores: [],
        error: undefined
      }.
    }.
    propiedad methods como {
      m√©todo limpiar_error con (error) donde {
        asigno this.error como undefined.
        hago this.$forceUpdate(true).
      }.
      m√©todo gestionar_error con (error) donde {
        imprimo error.
        asigno this.error como error.
        hago this.$forceUpdate(true).
      }.
      m√©todo compilar_colores donde {
        creo entrada_original como this.cm_entrada.getValue().
        creo entrada_aplantillada como this.root.$window.ejs.render(entrada_original).
        creo ast como this.root.$window.ColorScript.parser.parse(entrada_aplantillada).
        asigno this.colores como ast.
        hago this.$forceUpdate(true).
      } en errores hago this.gestionar_error(error).
    }.
    propiedad watch como {}.
    propiedad computed como {}.
    m√©todo beforeCreate donde {}.
    m√©todo created donde {}.
    m√©todo beforeMount donde {}.
    m√©todo mounted donde {
      asigno this.cm_entrada como CodeMirror.fromTextArea(this.$refs.consola_de_entrada, {
        lineNumbers: true
      }).
    }.
    m√©todo beforeUpdate donde {}.
    m√©todo updated donde {}.
    m√©todo beforeUnmount donde {}.
    m√©todo unmounted donde {}.
    m√©todo activated donde {}.
    m√©todo deactivated donde {}.
  }.
}.

asigno window.App como una aplicaci√≥n vue2 con nombre "App" con rutas [{
  propiedad path como "/".
  propiedad name como "PaginaDeInicio".
  propiedad component como PaginaDeInicio.
  propiedad props como {}.
}] con traducciones {
    propiedad es como {}.
    propiedad en como {}.
    propiedad ca como {}.
} con plantilla {
  <div class="App Component Castelog-app win7">
    <router-view :root="this"></router-view>
  </div>
} con estilos {
    html {}
    body {}
    .Component {}
    .App {}
} con l√≥gica {
  retorno {
    m√©todo data donde {
      retorno {
        errores: []
      }.
    }.
    propiedad methods como {
      m√©todo gestionar_error con (error) donde {
        imprimo error.
        apendizo error en this.errores.
      }.
    }.
    propiedad watch como {}.
    m√©todo beforeMount donde {
      asigno this.$window como window.
    }.
    m√©todo mounted donde {}.
  }.
} montada en "#app".